const qrcode = require('qrcode');
const crypto = require('crypto')

//有沒有這個垃圾註解
//雖然base64的自組比較短但產生qrcode需要長(我猜是符號)
// let cto = crypto.randomBytes(300);
// let text = cto.toString('base64');
// let t2 = cto.toString('hex');
// console.log("~~~~~~~~~~~~~~~~")
// console.log(cto)
// console.log(text)
// console.log(t2)
// console.log("~~~~~~~~~~~~~~~~")
// console.log(text.length)
// console.log(t2.length)
// console.log("!!!!!!!!!!!!!!!!")
// text = t2
// text = '1234567890'
// text += '12345678'
// text += '1234567890'
// text += '1234567890'

//errorlevel:H version:1 長度:18(數字) 英文:7碼
//數字最多 7,089 字元,文數字最多 4,296 字元,8位元字元組(二進制)最多 2,953 字元,日本漢字最多1,817 字元。


// qrcode.toDataURL(text, function (err, url) {
//     if (err) throw err;
//     console.log("~~~@@@@@@@~~")
//     console.log(url);
//     console.log("~~~@@@@@@~~~~~")
// });
let qrqr = ''
let tta = 'LIN291345JZXPEEngli376sshpanasdf6fjlxcbS25a25s526Gfhghtyj526iuk526uik526668275iuk652iu56265556259vmzserewlfjdspafjelSLADFEWOPJSDFLKS2345562AJggEND'  //'asdf1ewq35r423sfdgW;EL這隻兔子中暑了不如...これわ日本語KRJZXPE;EW132453192873213';
//24字

console.log(tta.length);
// 容錯率 L ; M ; Q ; H
const opts = {
    errorCorrectionLevel: 'H', //容錯率越大 能包含的資訊越少
    version: 11
};
qrcode.toDataURL('I am a pony!', function (err, url) {
    console.log("!!!!!!!!!!!!!!!!!")
    console.log(url)
    console.log("!!!!!!!!!!!!!!!!!")
})
qrcode.toString(tta, opts, function (err, string) {
    if (err) throw err
    console.log(string)
    let buf = new Buffer(string);
    let qrstr = buf.toString('hex');
    qrstr = qrstr.replace(/20/g, 'I'); //把空白換掉
    qrstr = qrstr.replace(/e2968/g, ''); //把重複的換掉
    let qrstrarr = qrstr.split('0a');
    let qrrows = (qrstrarr.length - 4) * 2 + (qrstrarr.length % 2 == 1 ? -1 : 0)//最後輸出會有多少行
    console.log("@@@")
    console.log(qrrows)
    let to2qr = Array(qrrows + 1).fill('');

    for (let i = 0; i < qrstrarr.length - 4; i++) { //前兩行 後兩行 都是2行空白
        let rows = qrstrarr[i + 2].split(''); //+2原因 開頭兩行為空白行
        for (let j = 4; j < rows.length - 4; j++) { //j=4 由於開頭4個為空白 -4因為結尾4碼也是空白
            if (rows[j] == '8') {
                to2qr[i * 2] += '1'; to2qr[i * 2 + 1] += '1'; //*2+1的原因為 一碼轉成兩行 11
            }
            if (rows[j] == '4') {
                to2qr[i * 2] += '0'; to2qr[i * 2 + 1] += '1'; //01
            }
            if (rows[j] == '0') {
                to2qr[i * 2] += '1'; to2qr[i * 2 + 1] += '0'; //10
            }
            if (rows[j] == 'I') {
                to2qr[i * 2] += '0'; to2qr[i * 2 + 1] += '0'; //00
            }
        }
    }
    //插上luhao logo
    console.log(to2qr)
    // let ttrows = (qrrows + (qrrows % 2 == 1 ? -1 : 0)) / 2 //14
    // to2qr[ttrows - 2] = to2qr[ttrows - 2].substring(0, 3) + '000000000000000000000' + to2qr[ttrows - 2].substring(21 + 3, to2qr[ttrows - 2].length)
    // to2qr[ttrows - 1] = to2qr[ttrows - 1].substring(0, 3) + '010001010101011101110' + to2qr[ttrows - 1].substring(21 + 3, to2qr[ttrows - 1].length)
    // to2qr[ttrows + 0] = to2qr[ttrows + 0].substring(0, 3) + '010001010111010101010' + to2qr[ttrows + 0].substring(21 + 3, to2qr[ttrows + 0].length)
    // to2qr[ttrows + 1] = to2qr[ttrows + 1].substring(0, 3) + '011101110101010101110' + to2qr[ttrows + 1].substring(21 + 3, to2qr[ttrows + 1].length)
    // to2qr[ttrows + 2] = to2qr[ttrows + 2].substring(0, 3) + '000000000000000000000' + to2qr[ttrows + 2].substring(21 + 3, to2qr[ttrows + 2].length)

    // console.log(to2qr)
    // to2qr = [
    //     '1111111111111111111111111111111111111111111111111111111111111111',
    //     '1000000010110110110000011001101000110000011000010011001000000011',
    //     '1011111010001111010101110110110010001111011111100101001011111011',
    //     '1010001010100001110101000010011010100010000110100010001010001011',
    //     '1010001011001101010000010101001001100101011011110010101010001011',
    //     '1010001011011111010000101101100000011101011000100010011010001011',
    //     '1011111010110110011000110110001110001110000110011000111011111011',
    //     '1000000010101010101010101010101010101010101010101010101000000011',
    //     '1111111110000100111000001100101110111001101011100010101111111111',
    //     '1110001010100011001100100110100000010010100011111010110001100011',
    //     '1101101100001001000011100010101011111010100001000101110111101011',
    //     '1101011011111011011100100001101000101100000011110101111001011011',
    //     '1111000101110000010111101111010000000010101000101011101101011011',
    //     '1011011000101110101011011000101111100011110101111000110010111011',
    //     '1100011110000001010101000111001101000001111010110101100100001111',
    //     '1100111001010011000001101111101100011101010110111010010010010111',
    //     '1001011111100011010111000000111110010110000101101111100101100011',
    //     '1011110011011011101100000011011111010011011010110011110010111011',
    //     '1000111101110000101010100001111111110011010101110110011100001111',
    //     '1010001001010011000101111000110010011001110000011001100010111011',
    //     '1000001111110100110001000101100111100111101111011111000011001111',
    //     '1011001010011010111011101000010110011101000101001000000111111111',
    //     '1011010111110110110010000010111110011100011001110110110010100011',
    //     '1011001000011110001111011110000001110000010000001001110000111111',
    //     '1101000101001100001001011110011001011011100101111000000100110011',
    //     '1110111000110001111010001011001110010110101010001001010011011011',
    //     '1010101100010110000001101110001110100000111110001010111100010111',
    //     '1100101010101110110001111100100010110000111010110000011101011111',
    //     '1101001100110101111101011010001001100100111101001000111000000111',
    //     '1010000000110011010001110000100000100110111100101101000000011111',
    //     '1010101110111010100001001000001110011100100011101111001110101011',
    //     '1001001010010100000100001011001010111111110000111111001010101111',
    //     '1110001110010100011101101000001110110110011000001011101110001111',
    //     '1011100000110111001110001101000000010001000001101101100000011111',
    //     '1001011110111100100100111010101010101000111011011011000101001011',
    //     '1011100001001011110101000001101101011000000001100101010010101011',
    //     '1101001100011111110010110110111111001001011001011010110011111011',
    //     '1000010001010000011011100101110000100100011000101110001000001011',
    //     '1111101110000000101111111011111000100000111101100001110111001011',
    //     '1111011001101101001101101111101000101010010110001111010100000111',
    //     '1010000100010011100011101010000100001101101101001010010011011111',
    //     '1010100010001001001000010011001001011000000101110101011101011111',
    //     '1111100111110110011100111100101001001000011101101011011010100011',
    //     '1000100000011011110000010100000101110011010001110101000011000111',
    //     '1101010100110000111110011010001100110001011101010110111100110011',
    //     '1101001011101101100010011011011011101010010101001011110001011011',
    //     '1011101110011110000000001111111111000110110000111101101110100011',
    //     '1110101001111101110001001010100000101111011111010011001110101011',
    //     '1010111101111111011100111011100100001101001101101000000001011111',
    //     '1010110010101011000011010000000011101110011110111010001111010111',
    //     '1010110101011011000110111100111000001101101000001001000010100011',
    //     '1110000010010101000011000011111011001000011011111001100111111011',
    //     '1000101100110000100110010001100011100011011001001010010000001111',
    //     '1000011010010110011101000001000000010111100101111110000000111111',
    //     '1111111110110010011001111100001110101001011100001000001110001011',
    //     '1000000011001011001100000011001010000001000001111111101010011011',
    //     '1011111011101000000110110010101110100011010110101011001110110011',
    //     '1010001010000111111111101111000000110110110000011100100000111111',
    //     '1010001010100000011100101010101000001100101111100101011101001011',
    //     '1010001010011110011100001010101001101111010011011101001011011011',
    //     '1011111011000100111001100001011110000000110111100110010010001111',
    //     '1000000011100100111011111100111010110011110010011100100010111011',
    //     '1111111111111111111111111111111111111111111111111111111111111111',
    //     '1111111111111111111111111111111111111111111111111111111111111111',
    //     '1111111111111111111111111111111111111111111111111111111111111111'
    // ]

    let tohex = Array(qrrows).fill(''); //
    for (let i = 0; i < to2qr.length - 1; i++) { //-1 最後一行一定是0000
        let row = to2qr[i] + '';
        let element = '';
        while (row.length > 0) {
            // console.log(row)
            let temp = (row.substring(0, 4) + "0000").substring(0, 4); //取出4碼不夠補0(後面)
            row = row.substring(4)
            element += parseInt(temp, 2).toString(16) + ''; //先 2 to 10 再轉成16
            // console.log(element)
        }
        // console.log(element);
        tohex[i] = element;
    }
    console.log(tohex)
    console.log("EEEEEEEEEEEEEEEEEND");
    let qrcodebin = tohex.join('');
    console.log(qrcodebin);
    let buf_qrcodebin = Buffer(qrcodebin, 'hex');
    console.log(buf_qrcodebin)
    // qrstrarr = qrstrarr.splice(0, 2)
    // qrstrarr = qrstrarr.splice(qrstrarr.length - 1, 2);
    // console.log(qrstrarr)


})

function tobig2(arr) {

}

function buf2str(buf) {
    let ret = Buffer.from(buf).toString('hex')
    return ret
}
function str2buf(str) {
    let ret = new Buffer(str, 'hex');
    return ret
}

function qr2arr(qrcode) {
    for (let i = 0; i < qrcode.length; i++) {

    }
}
/**
 * 將start到end的拔掉
 * @param {*} buf 
 * @param {*} start 大於1
 * @param {*} end 
 */
function bufmid(buf, start, end) {
    // if (buf instanceof Buffer )
    let a = buf.slice(0, start - 1)
    let b = buf.slice(end, buf.byteLength)
    let ret = Buffer.concat([a, b])
    return ret
}

// const path = './qrcode.png';
// qrcode.toFile(path, text, opts, (err) => {
//     if (err) throw err;
//     console.log('saved.');
// });


// 0XFE 0X6D 0XFE 
//---- 21*21
/*---------------------
█▀▀▀▀▀█ ▀▀▄▀▀ █▀▀▀▀▀█   
█ ███ █ ▀▄ ▀▄ █ ███ █
█ ▀▀▀ █ ▄  ██ █ ▀▀▀ █
▀▀▀▀▀▀▀ ▀▄█ █ ▀▀▀▀▀▀▀
█▄█▄ ▄▀▀▄  ▄ ▄▄▀  ▀ █
█▄▀▄▀█▀▄ █▀█▀█▄███ ▄▀
 ▀  ▀ ▀ ▄█ ▀▀▀▀ █▀ ▀█
█▀▀▀▀▀█ ▀█▀ ▄ ▀ █▄ ▄█
█ ███ █  ██▄ ▄█ ██  ▀
█ ▀▀▀ █ ▀▄ █▀█▄▄▀█▀▀▀
▀▀▀▀▀▀▀ ▀ ▀▀▀▀▀ ▀▀  ▀
*/

// 29*29
/*
█▀▀▀▀▀█ ██▄ █▀▀▀▀▄▄▄  █▀▀▀▀▀█
█ ███ █ █▄▀  ▄█▄▄▀█   █ ███ █
█ ▀▀▀ █ ▄  ▀ ▄█▀█ ▀▄  █ ▀▀▀ █
▀▀▀▀▀▀▀ ▀▄▀▄▀ ▀▄▀▄▀ █ ▀▀▀▀▀▀▀
▀▀  ▀█▀▄ ▄▄█▀ ▄▄▄▀▄▀▀ ▄█▄▀█▀█
▀█▄▀ ▀▀▄▄ ▄█  ▄█▀▄▀▄▄▀ ▄▄▄  ▀
▀▀▄█  ▀  ▄▀█▀ ▄▄▄▀▄▀▀▄▄▀▄▀▄ ▄
▄█▄█▀█▀█▄ █▀█▀ ▀▄██ ▄ █  █ ▄▀
▄▄▄▄▀▀▀▄▀██▄▀▄▄▄▄▀▀▀▀▄▄▀▄▀▄ ▄
▄▄▄ ▀▀ ▀█▀▄ ▄▀███▄▀▄▀██▄▀ █
▀▀▀ ▀▀▀▀▄▀▀▄▀▄▄▄▄▀▀▀█▀▀▀█▀▄ ▄
█▀▀▀▀▀█ ▄ ███▀ █▄▄ ██ ▀ ██▀▄▀
█ ███ █ ▀▄ ▄▀▄▄▄▄▀▀▀█▀▀▀▀█ ▄▄
█ ▀▀▀ █ ▄███▄▀▄█ ▄▀ ▄ ▄  ▄ ██
▀▀▀▀▀▀▀ ▀ ▀ ▀   ▀▀▀ ▀▀   ▀ ▀ 
*/
